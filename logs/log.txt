
* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:42:in tick
*** app/button.rb:1

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:42:in tick
*** app/button.rb:1

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:42:in tick
*** app/button.rb:1

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:42:in tick
*** app/button.rb:1

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:42:in tick
*** app/button.rb:1

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:42:in tick
*** app/button.rb:1

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:67:in tick
*** app/main.rb:58

[Message ID: [:consider_border!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:69:in tick
*** app/main.rb:60

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:69

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:69

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:69

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:69

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:69

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:69

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:70

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:70

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:76:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:75:in tick
*** app/main.rb:66

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:75:in tick
*** app/main.rb:66

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:78:in tick
*** app/main.rb:67

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:79:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:80:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#border~ is deprecated becuase it's poorly named. Use ~Hash#border!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:border! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).border

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#border!~ you can combine the
    # ~Hash#merge!~ and ~Hash#border~ method calls
    args.state.some_border ||= { x: 8, y: 8, w: 32, h: 32 }.border! primitive_style

    args.outputs.primitives << args.state.button_border
  end
#+end_src
** Option 2: ~:to_border &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_border!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: ~Hash#label~ is deprecated becuase it's poorly named. Use ~Hash#label!~ instead.
This method will stay here for backwards compatibility. But, consider using one of the following methods:
** Option 1: ~:label! &OPTIONAL additional_keys_to_merge~
This will mutate the current hash in-place. It's identical to the current method you're using,
but better signifies that a side effect is occuring (because of the ~!~ at the end).
*** Example
Here is an example of how your code may change.
**** Before
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # here ~Hash#merge!~ and ~Hash#border~ are used in combination
    args.state.some_primitive ||= { x: 8, y: 8, w: 32, h: 32 }.merge!(primitive_style).label

    args.outputs.primitives << args.state.some_primitive
  end
#+end_src
**** After
#+begin_src ruby
  def tick args
    args.state.primitive_style  ||= { r: 255, g: 255, b: 255 }

    # if you use ~Hash#label!~ you can combine the
    # ~Hash#merge!~ and ~Hash#label~ method calls
    args.state.some_label ||= { x: 8, y: 8, w: 32, h: 32 }.label! primitive_style

    args.outputs.primitives << args.state.button_label
  end
#+end_src
** Option 2: ~:to_label &OPTIONAL additional_keys_to_merge~
This will return a new ~Hash~ leaving the original *untouched*.
** Caller:
If you decide to fix this error now, you can run ~Log.reset~ to invalidate this warning
and be notified of other places you're using this function.
*** app/main.rb:81:in tick
*** app/main.rb:68

[Message ID: [:consider_label!]]


* WARNING: Plant does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Plant
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { w: w, h: h, age: age, invalid: invalid, path: path, a: a }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Plant does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Plant
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { w: w, h: h, age: age, invalid: invalid, path: path, a: a }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Plant]]

* INFO: The .to_s function for type [Plant] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Plant:0x1380b48f0>

* WARNING: Plant does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Plant
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x: x, y: y, w: w, h: h, age: age, invalid: invalid, path: path, a: a }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Game does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Game
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* WARNING: Method invocation on a nil value detected.
The method clicked? with args [{:state=>{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{:clicked?=>4}, :plants=>[], :seeds=>500, :harvested_plants=>0, :cash=>5, :price=>{:seed=>5, :plant=>10, :harvester=>150, :planter=>150, :seller=>50}, :auto_planters=>[], :auto_harvesters=>[], :auto_sellers=>[], :counter=>1, :game_state=>#<Game:0x1300c8200>, :start_button=>{:entity=>{:id=>:start, :rect=>{:x=>540, :y=>360, :w=>200, :h=>50}, :primitives=>[{:x=>540, :y=>360, :w=>200, :h=>50, :primitive_marker=>:border}, {:x=>545, :y=>390, :text=>"Start", :size_enum=>-4, :primitive_marker=>:label}, [541, 361, 198, 48, 88, 62, 35, 60]]}}, :buy_seed_button=>{:entity_id=>1, :entity_name=>:buy_seed_button, :entity_keys_by_ref=>{}}, :sell_button=>{:entity_id=>2, :entity_name=>:sell_button, :entity_keys_by_ref=>{}}, :auto_harvester_button=>{:entity_id=>3, :entity_name=>:auto_harvester_button, :entity_keys_by_ref=>{}}}, :temp_state=>{}, :inputs=>{:controller_one=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :controller_two=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :controller_three=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :controller_four=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :keyboard=>{:key_up=>{:truthy_keys=>[]}, :key_held=>{:truthy_keys=>[]}, :key_down=>{:truthy_keys=>[]}, :has_focus=>false}, :mouse=>{:x=>0, :y=>0, :moved=>nil, :moved_at=>nil, :has_focus=>false}, :text=>[]}, :passes=>[], :outputs=>{:solids=>[], :sprites=>[{:x=>200, :y=>0, :w=>1080, :h=>720, :path=>"sprites/grass_background.png"}, {:x=>250, :y=>50, :w=>980, :h=>620, :path=>"sprites/background.png"}, {:x=>0, :y=>0, :w=>1280, :h=>720, :path=>"sprites/splash.png"}], :lines=>[], :labels=>[], :sounds=>[], :borders=>[], :primitives=>[{:x=>540, :y=>360, :w=>200, :h=>50, :primitive_marker=>:border}, {:x=>545, :y=>390, :text=>"Start", :size_enum=>-4, :primitive_marker=>:label}, [541, 361, 198, 48, 88, 62, 35, 60]], :static_solids=>[], :static_borders=>[], :static_sprites=>[], :static_lines=>[], :static_labels=>[], :static_primitives=>[]}, :grid=>{:top=>720, :device_bottom=>0.0, :device_top=>720, :right=>1280, :left_margin=>0.0, :device_height=>720, :device_width=>1280, :bottom=>0.0, :ffi_draw=>"", :native_width=>1280, :native_height=>720, :origin_x=>0.0, :runtime=>{:argv=>"./dragonruby", :platform=>"Mac OS X", :required_files=>["app/plant.rb", "app/automation.rb", "app/labels.rb", "app/button.rb", "app/game.rb"], :reload_list_history=>{"app/main.rb"=>{:current=>{:path=>"app/main.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/main.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/main.rb", :global_at=>-1, :event=>:processing}, {:path=>"app/main.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/plant.rb"=>{:current=>{:path=>"app/plant.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/plant.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/plant.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/automation.rb"=>{:current=>{:path=>"app/automation.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/automation.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/automation.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/labels.rb"=>{:current=>{:path=>"app/labels.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/labels.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/labels.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/button.rb"=>{:current=>{:path=>"app/button.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/button.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/button.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/game.rb"=>{:current=>{:path=>"app/game.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/game.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/game.rb", :global_at=>-1, :event=>:reload_completed}]}}}, :allscreen_offset_y=>0, :origin_y=>720, :native_scale=>1.0, :allscreen_offset_x=>0, :native_scale_enum=>100, :left=>0.0, :device_right=>1280, :device_left=>0.0, :name=>:bottom_left, :allscreen_left=>0, :allscreen_right=>1280, :center=>[640.0, 360.0], :center_y=>360.0, :allscreen_bottom=>0, :rect=>[0.0, 0.0, 1280, 720], :allscreen_top=>720, :allscreen_height=>720, :bottom_margin=>0.0, :allscreen_width=>1280, :center_x=>640.0}}] was invoked on auto_seller_button within args.state, but auto_seller_button has a
value of nil (the invocation of clicked? was suppressed). Consider setting
a default value for auto_seller_button to avoid null reference exceptions later on."

** app/game.rb:12


* WARNING: Game does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Game
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* WARNING: Method invocation on a nil value detected.
The method clicked? with args [{:state=>{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{:clicked?=>4}, :plants=>[], :seeds=>500, :harvested_plants=>0, :cash=>5, :price=>{:seed=>5, :plant=>10, :harvester=>150, :planter=>150, :seller=>50}, :auto_planters=>[], :auto_harvesters=>[], :auto_sellers=>[], :counter=>1, :game_state=>#<Game:0x1200a0160>, :start_button=>{:entity=>{:id=>:start, :rect=>{:x=>540, :y=>360, :w=>200, :h=>50}, :primitives=>[{:x=>540, :y=>360, :w=>200, :h=>50, :primitive_marker=>:border}, {:x=>545, :y=>390, :text=>"Start", :size_enum=>-4, :primitive_marker=>:label}, [541, 361, 198, 48, 88, 62, 35, 60]]}}, :buy_seed_button=>{:entity_id=>1, :entity_name=>:buy_seed_button, :entity_keys_by_ref=>{}}, :sell_button=>{:entity_id=>2, :entity_name=>:sell_button, :entity_keys_by_ref=>{}}, :auto_harvester_button=>{:entity_id=>3, :entity_name=>:auto_harvester_button, :entity_keys_by_ref=>{}}}, :temp_state=>{:entity_id=>2, :entity_keys_by_ref=>{}}, :inputs=>{:controller_one=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :controller_two=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :controller_three=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :controller_four=>{:key_down=>{}, :key_held=>{}, :key_up=>{}}, :keyboard=>{:key_up=>{:truthy_keys=>[]}, :key_held=>{:truthy_keys=>[]}, :key_down=>{:truthy_keys=>[]}, :has_focus=>false}, :mouse=>{:x=>0, :y=>0, :moved=>nil, :moved_at=>nil, :has_focus=>false}, :text=>[]}, :passes=>[], :outputs=>{:solids=>[], :sprites=>[{:x=>200, :y=>0, :w=>1080, :h=>720, :path=>"sprites/grass_background.png"}, {:x=>250, :y=>50, :w=>980, :h=>620, :path=>"sprites/background.png"}, {:x=>0, :y=>0, :w=>1280, :h=>720, :path=>"sprites/splash.png"}], :lines=>[], :labels=>[], :sounds=>[], :borders=>[], :primitives=>[{:x=>540, :y=>360, :w=>200, :h=>50, :primitive_marker=>:border}, {:x=>545, :y=>390, :text=>"Start", :size_enum=>-4, :primitive_marker=>:label}, [541, 361, 198, 48, 88, 62, 35, 60]], :static_solids=>[], :static_borders=>[], :static_sprites=>[], :static_lines=>[], :static_labels=>[], :static_primitives=>[]}, :grid=>{:top=>720, :device_bottom=>0.0, :device_top=>720, :right=>1280, :left_margin=>0.0, :device_height=>720, :device_width=>1280, :bottom=>0.0, :ffi_draw=>"", :native_width=>1280, :native_height=>720, :origin_x=>0.0, :runtime=>{:argv=>"./dragonruby", :platform=>"Mac OS X", :required_files=>["app/plant.rb", "app/automation.rb", "app/labels.rb", "app/button.rb", "app/game.rb"], :reload_list_history=>{"app/main.rb"=>{:current=>{:path=>"app/main.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/main.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/main.rb", :global_at=>-1, :event=>:processing}, {:path=>"app/main.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/plant.rb"=>{:current=>{:path=>"app/plant.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/plant.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/plant.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/automation.rb"=>{:current=>{:path=>"app/automation.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/automation.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/automation.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/labels.rb"=>{:current=>{:path=>"app/labels.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/labels.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/labels.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/button.rb"=>{:current=>{:path=>"app/button.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/button.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/button.rb", :global_at=>-1, :event=>:reload_completed}]}, "app/game.rb"=>{:current=>{:path=>"app/game.rb", :global_at=>-1, :event=>:reload_completed}, :history=>[{:path=>"app/game.rb", :global_at=>-1, :event=>:reload_queued}, {:path=>"app/game.rb", :global_at=>-1, :event=>:reload_completed}]}}}, :allscreen_offset_y=>0, :origin_y=>720, :native_scale=>1.0, :allscreen_offset_x=>0, :native_scale_enum=>100, :left=>0.0, :device_right=>1280, :device_left=>0.0, :name=>:bottom_left, :allscreen_left=>0, :allscreen_right=>1280, :center=>[640.0, 360.0], :center_y=>360.0, :allscreen_bottom=>0, :rect=>[0.0, 0.0, 1280, 720], :allscreen_top=>720, :allscreen_height=>720, :bottom_margin=>0.0, :allscreen_width=>1280, :center_x=>640.0}}] was invoked on auto_seller_button within args.state, but auto_seller_button has a
value of nil (the invocation of clicked? was suppressed). Consider setting
a default value for auto_seller_button to avoid null reference exceptions later on."

** app/game.rb:12


* WARNING: Game does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Game
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

